type Anonymous {
  plugins(type: [PluginType], searchText: String, first: Int, after: JSON): PluginConnection
  plugin(_id: ObjectID, name: String): Plugin
  plugins_count: Int
}

interface Comment {
  id: ID!
  content: String!
  type: CommentType
  author: User!
  createdAt: Date!
  parent: ObjectID!
  isOwner: Boolean
}

enum CommentType {
  photo
  text
}

scalar Date

type EditSession {
  creator: User
  authors: [User]
}

type File {
  id: ID!
  url: String
  crc: Int
}

type FileToken {
  token: String!
  expires: Int!
  id: String
}

enum Gender {
  girl
  boy
}

scalar JSON

type Log implements Node {
  id: ID!
  type: String
  operation: String
  variables: JSON
  status: Int
  startedAt: Date
  time: Int
  report: JSON
  author: User
}

type Mutation {
  requestToken(contact: String!): Boolean
  login(contact: String!, token: String!, name: String): User
  logout: Boolean
  user_update(photo: URL, username: String, birthday: Date, gender: Gender, location: String, signature: String): Date
  role_create(name: String): Role
  role_update(_id: ObjectID!, name: String): Date
  role_remove(_id: ObjectID!): Boolean
  role_user_add(_id: ObjectID!, users: [String!]!): Date
  role_user_remove(_id: ObjectID!, users: [String!]!): Date
  file_create(_id: String!, host: ID!, bucket: String, size: Int, crc: Int, mimeType: String, imageInfo: JSON): File
  file_clean(host: ID!): Boolean
  comment_create(parent: ID, content: String!, type: CommentType, _id: ObjectID): Comment
  plugin_update(_id: ObjectID!, code: URL!, name: String, readme: String, keywords: [String], type: [PluginType], description: String, version: String, config: JSON): Plugin
  buy_plugin(_id: ObjectID!, version: String, config: JSON): User
  withdraw_plugin(_id: ObjectID!, version: String, config: JSON): User
  user_setDeveloper(be: Boolean!): User
}

interface Node {
  id: ID!
}

"""mongodb ID"""
scalar ObjectID

type PageInfo {
  hasNextPage: Boolean
  endCursor: JSON
  hasPreviousPage: Boolean
  startCursor: JSON
}

type Plugin implements Node {
  id: ID!
  name: String!
  description: String!
  version: String!
  author: User!
  config: JSON
  code: URL!
  readme: String
  keywords: [String]
  history: [Plugin]
  type: [PluginType]
  using: JSON
  isMine: Boolean
}

type PluginComment implements Comment & Node {
  id: ID!
  content: String!
  type: CommentType
  author: User!
  createdAt: Date!
  parent: ObjectID!
  isOwner: Boolean
}

type PluginCommentConnection {
  edges: [PluginCommentEdge]
  pageInfo: PageInfo
}

type PluginCommentEdge {
  node: PluginComment
  cursor: JSON
}

type PluginConnection {
  edges: [PluginEdge]
  pageInfo: PageInfo
}

type PluginEdge {
  node: Plugin
  cursor: JSON
}

enum PluginType {
  Input
  Loader
  Emitter
  Stream
  Representation
  Office
}

type Query {
  version: String!
  schema: String!
  me: User!
  file_upload_token(key: String): FileToken
  plugins(type: [PluginType], mine: Boolean, favorite: Boolean, using: Boolean, searchText: String, first: Int, after: JSON): PluginConnection
  anonymous: Anonymous!
  plugin_comments(parent: ObjectID, last: Int, before: JSON): PluginCommentConnection
}

type Role implements Node {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date
  author: User
  users: [User]
}

type Subscription {
  ping: Boolean
  edit_session(_id: ObjectID): EditSession
}

scalar URL

type User implements Node {
  id: ID!
  photo(size: Int = 25): URL
  name: String
  email: String
  phone: String
  createdAt: Date!
  updatedAt: Date
  token: String
  username: String
  birthday: Date
  gender: Gender
  location: String
  signature: String
  roles: [Role]
  extensions: [Plugin]!
  plugins: [Plugin]!
  plugin(_id: ObjectID, name: String): Plugin
  isDeveloper: Boolean
}
